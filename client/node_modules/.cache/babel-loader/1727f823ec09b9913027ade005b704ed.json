{"ast":null,"code":"var _jsxFileName = \"/Users/anandgokul/Documents/FreeVar_Local/homework8-anandgok/frontend/client/src/component/SearchApp.js\";\nimport React, { Component } from \"react\";\nimport { Search } from \"semantic-ui-react\";\nimport _ from \"lodash\";\nimport logo from \"../logo.svg\";\nimport SelectedResult from \"./SelectedResult\";\nimport \"../App.css\";\n\nclass SearchApp extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      results: ['null'],\n      selectedResult: null\n    };\n\n    this.handleSearchChange = (e, {\n      value\n    }) => {\n      this.setState({\n        isLoading: true,\n        value\n      });\n      setTimeout(() => {\n        const re = new RegExp(_.escapeRegExp(this.state.value), 'i');\n\n        const isMatch = result => re.test(result.title);\n\n        const filteredResults = _.reduce(source, (memo, data, name) => {\n          const results = _.filter(data.results, isMatch);\n\n          if (results.length) memo[name] = {\n            name,\n            results\n          }; // eslint-disable-line no-param-reassign\n\n          return memo;\n        }, {});\n\n        this.setState({\n          isLoading: false,\n          results: filteredResults\n        });\n      }, 300);\n    };\n\n    this.handleSearchChangeOriginal = async (event, {\n      value\n    }) => {\n      try {\n        const response = await fetch(`https://api.cognitive.microsoft.com/bing/v7.0/suggestions?mkt=fr-FR&q=${value}`, {\n          headers: {\n            \"Ocp-Apim-Subscription-Key\": \"d901d64eeb334505825c20a547b760ba\" //d901d64eeb334505825c20a547b760ba\n\n          }\n        });\n        const data = await response.json();\n        const resultsRaw = data.suggestionGroups[0].searchSuggestions;\n        const results = resultsRaw.map(result => ({\n          title: result.displayText,\n          url: result.url\n        }));\n        console.log(results);\n        this.setState({\n          results\n        });\n      } catch (error) {\n        console.error(`Error fetching search ${value}`);\n      }\n    };\n\n    this.handleResultSelect = (e, {\n      result\n    }) => this.setState({\n      selectedResult: result\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(Search, {\n      onSearchChange: _.debounce(this.handleSearchChange, 1000, {\n        leading: true\n      }),\n      results: this.state.results,\n      onResultSelect: this.handleResultSelect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Search, Object.assign({\n      onResultSelect: this.handleResultSelect,\n      onSearchChange: _.debounce(this.handleSearchChange, 1000, {\n        leading: true\n      }),\n      results: this.state.results\n    }, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(SelectedResult, {\n      result: this.state.selectedResult,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nconst source = _.range(0, 3).reduce(memo => {\n  const name = faker.hacker.noun(); // eslint-disable-next-line no-param-reassign\n\n  memo[name] = {\n    name,\n    results: getResults()\n  };\n  return memo;\n}, {});\n\nexport default SearchApp;","map":{"version":3,"sources":["/Users/anandgokul/Documents/FreeVar_Local/homework8-anandgok/frontend/client/src/component/SearchApp.js"],"names":["React","Component","Search","_","SelectedResult","SearchApp","state","results","selectedResult","handleSearchChange","e","value","setState","isLoading","setTimeout","re","RegExp","escapeRegExp","isMatch","result","test","title","filteredResults","reduce","source","memo","data","name","filter","length","handleSearchChangeOriginal","event","response","fetch","headers","json","resultsRaw","suggestionGroups","searchSuggestions","map","displayText","url","console","log","error","handleResultSelect","render","debounce","leading","props","range","faker","hacker","noun","getResults"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Search } from \"semantic-ui-react\";\nimport _ from \"lodash\";\nimport logo from \"../logo.svg\";\nimport SelectedResult from \"./SelectedResult\";\nimport \"../App.css\";\n\nclass SearchApp extends Component {\n   state = { results: ['null'], selectedResult: null };\n\n   handleSearchChange = (e, { value }) => {\n      this.setState({ isLoading: true, value })\n\n      setTimeout(() => {\n\n         const re = new RegExp(_.escapeRegExp(this.state.value), 'i')\n         const isMatch = (result) => re.test(result.title)\n\n         const filteredResults = _.reduce(\n            source,\n            (memo, data, name) => {\n               const results = _.filter(data.results, isMatch)\n               if (results.length) memo[name] = { name, results } // eslint-disable-line no-param-reassign\n\n               return memo\n            },\n            {},\n         )\n\n         this.setState({\n            isLoading: false,\n            results: filteredResults,\n         })\n      }, 300)\n   }\n\n   handleSearchChangeOriginal = async (event, { value }) => {\n      try {\n         const response = await fetch(\n            `https://api.cognitive.microsoft.com/bing/v7.0/suggestions?mkt=fr-FR&q=${value}`,\n            {\n               headers: {\n                  \"Ocp-Apim-Subscription-Key\": \"d901d64eeb334505825c20a547b760ba\" //d901d64eeb334505825c20a547b760ba\n               }\n            }\n         );\n         const data = await response.json();\n         const resultsRaw = data.suggestionGroups[0].searchSuggestions;\n         const results = resultsRaw.map(result => ({ title: result.displayText, url: result.url }));\n         console.log(results);\n         this.setState({ results });\n      } catch (error) {\n         console.error(`Error fetching search ${value}`);\n      }\n   };\n\n   handleResultSelect = (e, { result }) =>\n      this.setState({ selectedResult: result });\n\n   render() {\n      return (\n         <div className=\"App\">\n            <Search\n               onSearchChange={_.debounce(this.handleSearchChange, 1000, {\n                  leading: true\n               })}\n               results={this.state.results}\n               onResultSelect={this.handleResultSelect}\n            />\n            <Search\n               onResultSelect={this.handleResultSelect}\n               onSearchChange={_.debounce(this.handleSearchChange, 1000, {\n                  leading: true,\n               })}\n               results={this.state.results}\n               {...this.props}\n            />\n            <SelectedResult result={this.state.selectedResult} />\n         </div>\n      );\n   }\n}\n\nconst source = _.range(0, 3).reduce((memo) => {\n   const name = faker.hacker.noun()\n\n   // eslint-disable-next-line no-param-reassign\n   memo[name] = {\n      name,\n      results: getResults(),\n   }\n\n   return memo\n}, {})\n\n\nexport default SearchApp;"]},"metadata":{},"sourceType":"module"}