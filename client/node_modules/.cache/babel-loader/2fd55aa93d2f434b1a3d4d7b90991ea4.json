{"ast":null,"code":"import _classCallCheck from\"/Users/anandgokul/Documents/FreeVar_Local/homework8-anandgok/frontend/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/anandgokul/Documents/FreeVar_Local/homework8-anandgok/frontend/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _createSuper from\"/Users/anandgokul/Documents/FreeVar_Local/homework8-anandgok/frontend/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import _inherits from\"/Users/anandgokul/Documents/FreeVar_Local/homework8-anandgok/frontend/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React from'react';import commentBox from'commentbox.io';import qs from'qs';var currentCardId='';var CommentBox=/*#__PURE__*/function(_React$Component){_inherits(CommentBox,_React$Component);var _super=_createSuper(CommentBox);function CommentBox(props){var _this;_classCallCheck(this,CommentBox);_this=_super.call(this,props);_this.props={currentCardId:''};_this.state={currentCardId:''};return _this;}_createClass(CommentBox,[{key:\"componentDidMount\",value:function componentDidMount(){//this.removeCommentBox = commentBox('5695436727779328-proj');\ncurrentCardId=this.props.currentCardId;//console.log(this.props.currentCardId);\n//console.log(currentCardId);\nthis.removeCommentBox=commentBox('5695436727779328-proj',{className:'commentbox',// the class of divs to look for\ndefaultBoxId:'commentbox',// the default ID to associate to the div\ntlcParam:'tlc',// used for identifying links to comments on your page\nbackgroundColor:null,// default transparent\ntextColor:null,// default black\nsubtextColor:null,// default grey\nsingleSignOn:null,// enables Single Sign-On (for Professional plans only)\n/**\n          * Creates a unique URL to each box on your page.\n          * \n          * @param {string} boxId\n          * @param {Location} pageLocation - a copy of the current window.location\n          * @returns {string}\n          */createBoxUrl:function createBoxUrl(boxId,pageLocation){pageLocation.search='';// removes query string!\npageLocation.hash=boxId;// creates link to this specific Comment Box on your page\nvar currentCardId=localStorage.getItem('currentcardIdforComments');//console.log(pageLocation); // returns the actual page url in: <a href=\"http://localhost:3000/home#commentbox\">\n//console.log(currentCardId);\n//console.log(pageLocation.href);// returns only the url part: http://localhost:3000/#commentbox\n//This code is used to remove the specific URL part from all pages, so that same comment exists when accessed from / and /bookmarks\nvar entireurl=pageLocation.href;var array=entireurl.split('/');//console.log(array);\nvar toplevelurlonly=array[0]+'//'+array[2]+'/#commentbox';//console.log(toplevelurlonly); //'http://localhost:3000/bookmarks/#commentbox'; -(RETURNS)-> http://localhost:3000/#commentbox\nreturn toplevelurlonly+currentCardId;// return url string\n},/**\n          * Fires once the plugin loads its comments.\n          * May fire multiple times in its lifetime.\n          * \n          * @param {number} count\n          */onCommentCount:function onCommentCount(count){}});}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this.removeCommentBox();}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"commentbox\"});}}]);return CommentBox;}(React.Component);export default CommentBox;","map":{"version":3,"sources":["/Users/anandgokul/Documents/FreeVar_Local/homework8-anandgok/frontend/client/src/component/CommentBox.js"],"names":["React","commentBox","qs","currentCardId","CommentBox","props","state","removeCommentBox","className","defaultBoxId","tlcParam","backgroundColor","textColor","subtextColor","singleSignOn","createBoxUrl","boxId","pageLocation","search","hash","localStorage","getItem","entireurl","href","array","split","toplevelurlonly","onCommentCount","count","Component"],"mappings":"4vBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,UAAP,KAAuB,eAAvB,CAEA,MAAOC,CAAAA,EAAP,KAAe,IAAf,CAEA,GAAIC,CAAAA,aAAa,CAAG,EAApB,C,GAEMC,CAAAA,U,oHACH,oBAAYC,KAAZ,CAAmB,4CAChB,uBAAMA,KAAN,EACA,MAAKA,KAAL,CAAa,CACVF,aAAa,CAAE,EADL,CAAb,CAGA,MAAKG,KAAL,CAAa,CACVH,aAAa,CAAE,EADL,CAAb,CALgB,aAQlB,C,oFAEmB,CAGjB;AAEAA,aAAa,CAAG,KAAKE,KAAL,CAAWF,aAA3B,CACA;AACA;AAEA,KAAKI,gBAAL,CAAwBN,UAAU,CAAC,uBAAD,CAA0B,CACzDO,SAAS,CAAE,YAD8C,CAChC;AACzBC,YAAY,CAAE,YAF2C,CAE7B;AAC5BC,QAAQ,CAAE,KAH+C,CAGxC;AACjBC,eAAe,CAAE,IAJwC,CAIlC;AACvBC,SAAS,CAAE,IAL8C,CAKxC;AACjBC,YAAY,CAAE,IAN2C,CAMrC;AACpBC,YAAY,CAAE,IAP2C,CAOrC;AACpB;;;;;;YAOAC,YAfyD,uBAe5CC,KAf4C,CAerCC,YAfqC,CAevB,CAE/BA,YAAY,CAACC,MAAb,CAAsB,EAAtB,CAA0B;AAC1BD,YAAY,CAACE,IAAb,CAAoBH,KAApB,CAA2B;AAE3B,GAAIb,CAAAA,aAAa,CAAGiB,YAAY,CAACC,OAAb,CAAqB,0BAArB,CAApB,CAEA;AACA;AACA;AAEA;AACA,GAAIC,CAAAA,SAAS,CAAGL,YAAY,CAACM,IAA7B,CACA,GAAIC,CAAAA,KAAK,CAAGF,SAAS,CAACG,KAAV,CAAgB,GAAhB,CAAZ,CACA;AACA,GAAIC,CAAAA,eAAe,CAAGF,KAAK,CAAC,CAAD,CAAL,CAAW,IAAX,CAAkBA,KAAK,CAAC,CAAD,CAAvB,CAA6B,cAAnD,CACA;AAEA,MAAOE,CAAAA,eAAe,CAAGvB,aAAzB,CAAwC;AAC1C,CAlCwD,CAmCzD;;;;;YAMAwB,cAzCyD,yBAyC1CC,KAzC0C,CAyCnC,CAErB,CA3CwD,CAA1B,CAAlC,CA8CF,C,mEAEsB,CAEpB,KAAKrB,gBAAL,GACF,C,uCAEQ,CAEN,mBACG,2BAAK,SAAS,CAAC,YAAf,EADH,CAGF,C,wBA9EqBP,KAAK,CAAC6B,S,EAkF/B,cAAezB,CAAAA,UAAf","sourcesContent":["import React from 'react';\nimport commentBox from 'commentbox.io';\n\nimport qs from 'qs';\n\nvar currentCardId = '';\n\nclass CommentBox extends React.Component {\n   constructor(props) {\n      super(props);\n      this.props = {\n         currentCardId: '',\n      };\n      this.state = {\n         currentCardId: '',\n      }\n   }\n\n   componentDidMount() {\n\n\n      //this.removeCommentBox = commentBox('5695436727779328-proj');\n\n      currentCardId = this.props.currentCardId;\n      //console.log(this.props.currentCardId);\n      //console.log(currentCardId);\n\n      this.removeCommentBox = commentBox('5695436727779328-proj', {\n         className: 'commentbox', // the class of divs to look for\n         defaultBoxId: 'commentbox', // the default ID to associate to the div\n         tlcParam: 'tlc', // used for identifying links to comments on your page\n         backgroundColor: null, // default transparent\n         textColor: null, // default black\n         subtextColor: null, // default grey\n         singleSignOn: null, // enables Single Sign-On (for Professional plans only)\n         /**\n          * Creates a unique URL to each box on your page.\n          * \n          * @param {string} boxId\n          * @param {Location} pageLocation - a copy of the current window.location\n          * @returns {string}\n          */\n         createBoxUrl(boxId, pageLocation) {\n\n            pageLocation.search = ''; // removes query string!\n            pageLocation.hash = boxId; // creates link to this specific Comment Box on your page\n\n            var currentCardId = localStorage.getItem('currentcardIdforComments');\n\n            //console.log(pageLocation); // returns the actual page url in: <a href=\"http://localhost:3000/home#commentbox\">\n            //console.log(currentCardId);\n            //console.log(pageLocation.href);// returns only the url part: http://localhost:3000/#commentbox\n\n            //This code is used to remove the specific URL part from all pages, so that same comment exists when accessed from / and /bookmarks\n            var entireurl = pageLocation.href;\n            var array = entireurl.split('/');\n            //console.log(array);\n            var toplevelurlonly = array[0] + '//' + array[2] + '/#commentbox';\n            //console.log(toplevelurlonly); //'http://localhost:3000/bookmarks/#commentbox'; -(RETURNS)-> http://localhost:3000/#commentbox\n\n            return toplevelurlonly + currentCardId; // return url string\n         },\n         /**\n          * Fires once the plugin loads its comments.\n          * May fire multiple times in its lifetime.\n          * \n          * @param {number} count\n          */\n         onCommentCount(count) {\n\n         }\n      });\n\n   }\n\n   componentWillUnmount() {\n\n      this.removeCommentBox();\n   }\n\n   render() {\n\n      return (\n         <div className=\"commentbox\" />\n      );\n   }\n}\n\n\nexport default CommentBox;"]},"metadata":{},"sourceType":"module"}